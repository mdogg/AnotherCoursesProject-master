{"Name":"Android Support Preferences V7, V14, V17 Library","Id":3308,"Alias":"xamandroidsupportpreferences","Description":"# v7, v14, v17 Preference Android Support Libraries\n\nThe Preference Support Libraries provide APIs to enable a modern Preference look and feel for older Android API levels using the `PreferenceFragment` class.  These support libraries also make it possible to use newer Preference controls on older API levels.\n\n\n\n## Android Support Libraries\n\nThe Android Support Libraries are a set of code libraries that provide backward-compatible versions of Android framework APIs as well as features that are only available through the library APIs. Each Support Library is backward-compatible to a specific Android API level. This design means that your applications can use the libraries\u0027 features and still be compatible with devices running older versions of Android.\n\nIncluding the Support Libraries in your Android project is considered a best practice for application developers, depending on the range of platform versions your app is targeting and the APIs that it uses. Using the features the libraries provide can help you improve the look of your application, increase performance and broaden the reach of your application to more users. \n\n\n\n","Version":"25.1.1.0","Summary":"Provide backward-compatible versions of Android framework APIs.","QuickStart":"# Using Preference Support Libraries\n\nThe v7, v14, and v17 Leanback preference support libraries allow you to use a common approach to implementing UI preferences across many different API levels.  \n\n\n## Configure your Theme\nTo use the Preference support classes, your app will need to apply a Preference style in the theme of your activity that will display preferences.  You can set your app theme in your `styles.xml` file to specify a `preferenceTheme`:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e\n\u003cresources\u003e\n\t\u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light\"\u003e\n\t\t\u003citem name=\"preferenceTheme\"\u003e@style/PreferenceThemeOverlay\u003c/item\u003e\n\t\u003c/style\u003e\n\u003c/resources\u003e\n```\n\nNote that you will need to inherit from a different theme for v17 Leanback (you could make a `values-television` folder so that the appropriate styles.xml file is automatically loaded at runtime for the given platform, with a declaration like this:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e\n\u003cresources\u003e\n\t\u003cstyle name=\"AppTheme\" parent=\"@style/Theme.Leanback\"\u003e\n\t\t\u003citem name=\"preferenceTheme\"\u003e@style/PreferenceThemeOverlay\u003c/item\u003e\n\t\u003c/style\u003e\n\u003c/resources\u003e\n```\n\nMake sure to apply the theme you created to the activity that will display Preference fragments.\n\n## Create Xml Preferences\n\nThe easiest way to setup a bunch of preferences is to define them in an Xml resource file:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e\n\u003cPreferenceScreen\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:title=\"This is a test\"\u003e\n\n    \u003cPreferenceCategory\n        android:title=\"Inline Preference\"\u003e\n\n        \u003cCheckBoxPreference\n            android:key=\"checkbox_preference\"\n            android:title=\"CheckboxPreference\"\n            android:summary=\"Checkbox Preference Summary\" /\u003e\n\n    \u003c/PreferenceCategory\u003e\n\n\t\u003c!-- ... --\u003e\n\t\n\u003c/PreferenceScreen\u003e\n```\n\n\n## Create Preference Fragments\n\nYou will need to create implementations of `PreferenceFragment` to display in your app.  If you would like to target Leanback as well, it\u0027s wise to create two implementations, deriving from the appropriate types:\n\n```csharp\npublic class SampleLeanbackPreferencesFragment : LeanbackPreferenceFragment\n{\n    public override void OnCreatePreferences (Bundle savedInstanceState, String rootKey) \n    {\n        AddPreferencesFromResource (Resource.Xml.Preferences);\n    }\n}\n\npublic class SamplePreferencesFragment : PreferenceFragment\n{\n    public override void OnCreatePreferences (Bundle savedInstanceState, String rootKey) \n    {\n        AddPreferencesFromResource (Resource.Xml.Preferences);\n    }\n}\n```\n\nNote that in the `OnCreatePreferences` methods both add preferences from the same xml resource we created earlier.\n\n\n\n## Set up your Activity Layout\n\nThe easiest way to load the fragments we just created is to let the Android Layout files automatically pick the right fragment for the right platform.  For most platforms the layout file in the `layout` folder will look like this:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:id=\"@+id/container\"\u003e\n    \u003cfragment\n        android:name=\"androidsupportsample.SamplePreferencesFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/fragmentPrefs\" /\u003e\n\u003c/FrameLayout\u003e\n```\n\nIf you are supporting Leanback, you can create a `layout-television` folder and add the following layout xml in a file with the same name as the first layout:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:id=\"@+id/container\"\u003e\n    \u003cfragment\n        android:name=\"androidsupportsample.SampleLeanbackPreferencesFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/fragmentPrefs\" /\u003e\n\u003c/FrameLayout\u003e\n```\n\nNote that the only difference in the television version is that it\u0027s using the `SampleLeanbackPreferencesFragment` instead of the `SamplePreferencesFragment`.  This way, our application will choose the correct layout and fragment to initialize for the right device at runtime.\n\n","Hash":"8fec1f5e97ea29e7c6a4203227b4e88b","TargetPlatforms":["android"],"TrialHash":null}